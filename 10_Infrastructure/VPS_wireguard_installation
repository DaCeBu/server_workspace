# WireGuard VPN Bridge Dokumentation

## üìå Netzwerkarchitektur

Die WireGuard-VPN-Bridge erm√∂glicht die Verbindung zwischen mehreren Heimnetzen sowie mobilen Clients. Alle Heimnetze und Peers sind √ºber den zentralen VPS-Server verbunden.

### **Subnetze der Heimnetze**

| Heimnetz   | Funktion                   | Subnetz           |
|------------|----------------------------|-------------------|
| Heimnetz 1 | Admin / Netzwerkger√§te     | 192.168.10.0/24   |
|            | Productive                 | 192.168.30.0/24   |
|            | Guests                     | 192.168.40.0/24   |
|            | IoT                        | 192.168.50.0/24   |
|            | Work                       | 192.168.60.0/24   |
| Heimnetz 2 | Hauptnetz                  | 192.168.70.0/24   |
|            | IoT                        | 192.168.75.0/24   |
|            | G√§ste                      | 192.168.76.0/24   |
| Heimnetz 3 | Hauptnetz (Freund 1)       | 192.168.80.0/24   |
|            | IoT                        | 192.168.85.0/24   |
| Heimnetz 4 | Hauptnetz (Freund 2)       | 192.168.90.0/24   |
|            | IoT                        | 192.168.95.0/24   |
| VPN-Clients | Mobile Ger√§te             | 10.10.50.0/24     |

### **WireGuard Peers**

| Peer                 | IP-Adresse   | Beschreibung                           |
|----------------------|--------------|----------------------------------------|
| VPS-Server           | 10.10.10.1   | Zentrale VPN-Bridge (WireGuard-Server) |
| UDM Pro (Heimnetz 1) | 10.10.10.2   | Heimnetz 1 Gateway                     |
| Heimnetz 2           | 10.10.20.1   | Gateway f√ºr Heimnetz 2                 |
| Heimnetz 3           | 10.10.30.1   | Gateway f√ºr Heimnetz 3 (Freund 1)      |
| Heimnetz 4           | 10.10.40.1   | Gateway f√ºr Heimnetz 4 (Freund 2)      |
| Mobiler Client 1     | 10.10.50.10  | Laptop                                 |
| Mobiler Client 2     | 10.10.50.11  | iPad                                   |
| Mobiler Client 3     | 10.10.50.12  | Handy                                  |

---

### **Setup VPS Client**

#### **1. Installation (Ionos VPS XS)**
- Auf dem VPS wird ein Ubuntu installiert.
- In den Einstellungen der Firewall unter Netzwerk wird der Port **22 TCP** ge√∂ffnet (f√ºr SSH) und der **WireGuard-Port 55120 UDP**.
- Nach Aufbau der Verbindung kann Port 22 in der Ionos-Firewall wieder geschlossen werden.
- Falls sp√§ter **Firezone** genutzt wird, m√ºssen auch **Port 80/443** ge√∂ffnet werden.
- **Der VPS sollte nicht als root laufen.**

##### **Benutzer anlegen und root deaktivieren**
```bash
sudo adduser vpsuser
sudo usermod -aG sudo vpsuser
sudo nano /etc/ssh/sshd_config
```
√Ñndere folgende Zeilen:
```plaintext
PermitRootLogin no
```
Danach den SSH-Dienst neu starten:
```bash
sudo systemctl restart sshd
```
Anschlie√üend mit dem neuen Benutzer anmelden:
```bash
ssh vpsuser@VPS_IP
```

##### **SSH Keys erstellen und einbinden**
[Link zur Anleitung]

---



## üîß **Installieren von WireGuard auf dem VPS**

### 2Ô∏è‚É£ **WireGuard Installation**
```bash
sudo apt update -y && sudo apt upgrade -y && sudo apt install software-properties-common wireguard wireguard-tools unzip -y
```

### 3Ô∏è‚É£ **IP-Forwarding aktivieren**
```bash
sudo nano /etc/sysctl.conf
```
**Folgende Zeilen am Ende hinzuf√ºgen:**
```plaintext
# Enable IPv4 packet forwarding
net.ipv4.ip_forward=1

# Enable Proxy ARP
net.ipv4.conf.all.proxy_arp=1

# Disable IPv6 packet forwarding
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
```
**√Ñnderungen aktivieren:**
```bash
sudo sysctl -p && sudo sysctl --system
```

### 4Ô∏è‚É£ **Schl√ºssel generieren**
```bash
(umask 077 && printf "PrivateKey= " | sudo tee /etc/wireguard/privatekey_unifi > /dev/null) && wg genkey | sudo tee -a /etc/wireguard/privatekey_unifi | wg pubkey | sudo tee /etc/wireguard/publickey_unifi && sudo cat /etc/wireguard/privatekey_unifi && sudo touch /etc/wireguard/unifi.conf
```

### 5Ô∏è‚É£ **Schl√ºssel anzeigen**
```bash
sudo cat /etc/wireguard/privatekey_unifi && sudo cat /etc/wireguard/publickey_unifi
```

### 6Ô∏è‚É£ **WireGuard Konfiguration erstellen**
```bash
sudo nano /etc/wireguard/unifi.conf
```
**Folgenden Inhalt einf√ºgen:**
```ini
[Interface]
PrivateKey= !!!Private Key der oben erzeugt wurde!!!
ListenPort = 55120
Address = 10.10.10.1/32

# Standard Routing
# Die Netzwerkkarte eth0 muss angepasst werden (z.B. via `ip addr` pr√ºfen)
PostUp     = iptables -t nat -A POSTROUTING -o unifi -j MASQUERADE
PostDown   = iptables -t nat -D POSTROUTING -o unifi -j MASQUERADE
PostUp     = iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown   = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

[Peer]
PublicKey = !!!PUBLIC KEY DER UDM PRO (aus WireGuard Client kopieren)!!!
AllowedIPs = 10.10.10.0/24, 192.168.50.0/24
# bei AllowedIPs gegebenenfalls weitere Heimnetzsubnetze eintragen. Die Freigabe einzelner IPs erfolgt dann in der UDMPro Firewall
```

### 6Ô∏è‚É£ **WireGuard starten und aktivieren**
```bash
sudo systemctl start wg-quick@unifi && sudo systemctl enable wg-quick@unifi
```

### 7Ô∏è‚É£ **Testen, ob WireGuard l√§uft**
```bash
sudo wg
```
**Der Status sollte folgendes anzeigen:**
```plaintext
interface: unifi
  public key: (KEY)
  private key: (hidden)
  listening port: 55120

peer: (KEY)
  endpoint: IP:AusgehandelterPort
  allowed ips: Die erlaubten IP-Bereiche
  latest handshake: 7 seconds ago
  transfer: 30.43 kB received, 93.85 kB sent
```
Falls unten unter `transfer` kein Datenverkehr zu sehen ist, ist die Verbindung nicht korrekt aufgebaut.

## **Routing und Firewall**

### 1Ô∏è‚É£ **Routen eintragen**

#### **Auf dem VPS**
Die folgenden Routen m√ºssen hinzugef√ºgt werden, um die Kommunikation mit der UDM und dem Heimnetz 1 zu erm√∂glichen:
```bash
# Vermutlich nicht erforderlich. Wichtig ist, dass alle beteiligten Netzte bei AllowedIPs in Firezone eingetragen sind. 
#sudo ip route add 10.10.10.0/24 via 10.10.10.2 dev unifi
#sudo ip route add 192.168.10.0/24 via 10.10.10.2 dev unifi
```

#### **Auf der UDM Pro**
Im **UniFi Webinterface** unter **Routing & Firewall**:
1. Gehe zu **Statische Routen** und f√ºge eine neue Route hinzu:
   - **Name:** VPN-Routing
   - **Subnetz:** `10.10.10.0/24`
   - **N√§chster Hop:** `10.10.10.2`
   - **Distance:** `1`

2. Eine zweite Route f√ºr das Heimnetz hinzuf√ºgen:
   - **Name:** VPN-Heimnetz
   - **Subnetz:** `192.168.10.0/24`
   - **N√§chster Hop:** `10.10.10.2`
   - **Distance:** `1`

### 2Ô∏è‚É£ **Firewall-Regeln auf der UDM Pro**
#### **Netzwerkprofile erstellen**
Erstelle unter **Einstellungen ‚Üí Profiles --> Network Objects** neue Netzwerkprofile:
- `VPN - VPN Adress Dreammaschine`
- `VPN - VPN Networks`
- `VPN - VPS WireGuard Server Adress`

#### **Firewall-Regeln f√ºr VPN Zugriff**
‚úÖ 1. **Regel f√ºr die Kommunikation vom VPS zur UDM** (Internet Local & Internet In)
   - **Name:** `VPN-Allow-VPS-to-DM`
   - **Typ:** Internet Local
   - **Aktion:** **Allow**
   - **Protokoll:** **UDP, TCP**
   - **Source Type:** Object
   - **Address Group:** `VPN-VPS`
   - **Port Object:** `WireGuard-Port (55120)`, `SSH (22)`
   - **Destination Type:** Object
   - **Address Group:** `VPN-DreamMachine`
   - **Port Object:** `WireGuard-Port (55120)`, `SSH (22)`

‚úÖ 2. **Regel f√ºr den Ping-Test (ICMP)** (Internet Local & Internet In)
   - **Name:** `VPN-Allow-ICMP`
   - **Typ:** Internet Local
   - **Aktion:** **Allow**
   - **Protokoll:** **ICMP**
   - **Source Type:** Object
   - **Address Group:** `VPN-VPS`
   - **Destination Type:** Object
   - **Address Group:** `VPN-DreamMachine`

### **Hinweis zur aktuellen Unifi-Firewall-L√∂sung**
Derzeit wird das VPN-Netzwerk in UniFi nicht als LAN erkannt, sondern als "Internet" klassifiziert. Das f√ºhrt dazu, dass Firewall-Regeln √ºber "Internet Local" und "Internet In" erstellt werden m√ºssen. Eine saubere L√∂sung w√§re es, das VPN-Netzwerk als LAN einzubinden, was aktuell in UniFi nicht direkt m√∂glich ist. Deshalb ist dieser Workaround erforderlich.

Speichere die Regeln und wende sie an. Nach wenigen Sekunden sollten sie aktiv sein.

Nun kann getestet werden, ob der Zugriff funktioniert:
```bash
ping 10.10.10.2
ping 192.168.10.1
```

---


## ** WireGuard Bridge h√§rten **

### ** Firewall VPS Server - minimale offene Ports **

Wenn die WireGuard Bridge funktioniert, k√∂nnen alle Ports blockiert werden, bis auf die WireGuard Ports.

#### ‚úÖ Erforderliche Ports (offen lassen)
| Dienst        | Port    | Protokoll | Zweck |
|--------------|--------|----------|------|
| **WireGuard (nativ, zur UDM)** | `55120` | UDP | Verbindung zur UDM |
| **Firezone (Docker, f√ºr Clients)** | `51820` | UDP | Verbindung f√ºr VPN-Clients |

#### ‚ùå Nicht ben√∂tigte Ports (schlie√üen)
| Dienst        | Port    | Protokoll | Grund |
|--------------|--------|----------|------|
| **Firezone Webinterface (HTTPS)** | `443` | TCP | Nur f√ºr neue Client-Anmeldungen n√∂tig |
| **Firezone Webinterface (HTTP Redirect)** | `80` | TCP | Kann abgeschaltet werden, wenn nicht genutzt |
| **SSH (falls nicht remote n√∂tig)** | `22` | TCP | Nur offen lassen, wenn SSH gebraucht wird |


### ** üîí Maximale H√§rtung der UDM Pro Firewall **

#### üìå Ziel:
Nur noch die folgenden Verbindungen zulassen:  
1Ô∏è‚É£ **Firezone-Clients ‚Üí Heimserver `192.168.0.50` auf Port `8123`**  
2Ô∏è‚É£ **Firezone-Clients ‚Üí VPS (`10.10.10.1`) auf SSH (`Port 22`)**  

üöÄ **Alles andere wird blockiert!**  

---

### ** üõ† 1Ô∏è‚É£ Firewall-Regeln f√ºr UDM Pro anpassen **

#### ‚úÖ Regel 1: Zugriff auf den Heimserver (`192.168.0.50:8123`) erlauben
**Standort:** `Einstellungen ‚Üí Routing & Firewall ‚Üí Firewall-Regeln ‚Üí Internet Local & Internet In`
- **Name:** `Allow Firezone ‚Üí Heimserver`
- **Aktion:** **Allow**
- **Source:** `VPN-Firezone (10.10.50.0/24)`
- **Destination:** `192.168.0.50`
- **Protokoll:** **TCP**
- **Port:** `8123`

---

#### ‚úÖ Regel 2: Zugriff auf den VPS (`10.10.10.1:22`) erlauben
**Standort:** `Einstellungen ‚Üí Routing & Firewall ‚Üí Firewall-Regeln ‚Üí Internet Local & Internet In`
- **Name:** `Allow Firezone ‚Üí VPS SSH`
- **Aktion:** **Allow**
- **Source:** `VPN-Firezone (10.10.50.0/24)`
- **Destination:** `10.10.10.1`
- **Protokoll:** **TCP**
- **Port:** `22`

---

#### ‚ùå Regel 3: Alle anderen Verbindungen blockieren (Default-Deny)
**Standort:** `Einstellungen ‚Üí Routing & Firewall ‚Üí Firewall-Regeln ‚Üí Internet Local & Internet In`
- **Name:** `Block All Firezone`
- **Aktion:** **Deny**
- **Source:** `VPN-Firezone (10.10.50.0/24)`
- **Destination:** `Any`
- **Protokoll:** `Any`
- **Port:** `Any`

üöÄ **Reihenfolge der Regeln beachten!**  
‚ö†Ô∏è **Die Block-Regel muss ganz unten stehen**, damit erst die erlaubten Verbindungen durchgelassen werden.

---